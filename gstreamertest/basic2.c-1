#include <gst/gst.h>

static GMainLoop *loop = NULL;

static gboolean
my_bus_callback(GstBus * bus, GstMessage * message, gpointer data)
{
	g_print("Got %s message\n", GST_MESSAGE_TYPE_NAME(message));

	switch (GST_MESSAGE_TYPE(message)) {
	case GST_MESSAGE_ERROR: {
		GError *err;
		gchar *debug;

		gst_message_parse_error(message, &err, &debug);
		g_print("Error: %s\n", err->message);
		g_error_free(err);
		g_free(debug);

		g_main_loop_quit(loop);
		break;
	}
	case GST_MESSAGE_EOS:
		/* end-of-stream */
		g_main_loop_quit(loop);
		break;
	default:
		/* unhandled message */
		break;
	}

	/* we want to be notified again the next time there is a message
	* on the bus, so returning TRUE (FALSE means we want to stop watching
	* for messages on the bus and our callback should not be called again)
	*/
	return TRUE;
}



static gboolean
switch_timer(GstElement * video_switch)
{
	gint nb_sources;
	GstPad *active_pad, *new_pad;
	gchar *active_name;

	g_message("switching");
	g_object_get(G_OBJECT(video_switch), "n-pads", &nb_sources, NULL);
	g_object_get(G_OBJECT(video_switch), "active-pad", &active_pad, NULL);

	active_name = gst_pad_get_name(active_pad);
	if (strcmp(active_name, "sink_0") == 0) {
		new_pad = gst_element_get_static_pad(video_switch, "sink_1");
	}
	else {
		new_pad = gst_element_get_static_pad(video_switch, "sink_0");
	}
	g_object_set(G_OBJECT(video_switch), "active-pad", new_pad, NULL);
	g_free(active_name);
	gst_object_unref(new_pad);

	g_message("current number of sources : %d, active source %s",
		nb_sources, gst_pad_get_name(active_pad));

	return (GST_STATE(GST_ELEMENT(video_switch)) == GST_STATE_PLAYING);
}

int main(int argc, char *argv[]) {
	GstElement *pipeline, *src1, *src2, *selector, *sink;
	//GstElement *filter;
	GstBus *bus;
	GstMessage *msg;
	GstStateChangeReturn ret;

	/* Initialize GStreamer */
	gst_init(&argc, &argv);
	loop = g_main_loop_new(NULL, FALSE);
	/* Create the elements */
	src1 = gst_element_factory_make("videotestsrc", "src1");
	src2 = gst_element_factory_make("rtmpsrc", "src2");
	selector = gst_element_factory_make("input-selector", "selector");

	sink = gst_element_factory_make("autovideosink", "sink");
	//filter = gst_element_factory_make("vertigotv", "filter");
	/* Create the empty pipeline */
	pipeline = gst_pipeline_new("test-pipeline");

	if (!pipeline || !src1 || !src2 || !selector || !sink) {
		g_printerr("Not all elements could be created.\n");
		return -1;
	}

	/* Build the pipeline */
	gst_bin_add_many(GST_BIN(pipeline), src1, src2, selector, sink, NULL);
	if (gst_element_link(src1, selector) != TRUE 
		|| gst_element_link(src2, selector) != TRUE
		|| gst_element_link(selector, sink) != TRUE) {
		g_printerr("Elements could not be linked.\n");
		gst_object_unref(pipeline);
		return -1;
	}

	/* Modify the source's properties */
	g_object_set(src1, "pattern", 0, NULL);
	g_object_set(src2, "pattern", 1, NULL);
	//g_object_set(filter, "speed", 50, "zoom-speed", 1.1, NULL);
	/* Start playing */
	bus = gst_pipeline_get_bus(GST_PIPELINE(pipeline));
	gst_bus_add_watch(bus, my_bus_callback, NULL);
	gst_object_unref(bus);
	ret = gst_element_set_state(pipeline, GST_STATE_PLAYING);
	if (ret == GST_STATE_CHANGE_FAILURE) {
		g_printerr("Unable to set the pipeline to the playing state.\n");
		gst_object_unref(pipeline);
		return -1;
	}
	g_timeout_add(2000, (GSourceFunc)switch_timer, selector);
	g_main_loop_run(loop);
	gst_element_set_state(pipeline, GST_STATE_NULL);
	gst_object_unref(pipeline);
	return 0;
}